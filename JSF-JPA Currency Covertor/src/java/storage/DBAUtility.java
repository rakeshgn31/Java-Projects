/*
 * Welcome to NetBeans...!!!
 */
package storage;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class DBAUtility extends javax.swing.JFrame {

    private final DefaultTableModel tableModel;
    
    @PersistenceContext(unitName = "CurrencyConversionRatesPU")
    private EntityManager em;
    
    /**
     * Creates new form DBAUtility
     */
    public DBAUtility() {
        initComponents();
        
        tableModel = (DefaultTableModel) tbConversionRate.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbConversionRate = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnAddRow = new javax.swing.JButton();
        btnDeleteRow = new javax.swing.JButton();
        lblCurrencyIdentifier = new javax.swing.JLabel();
        lblConvRate = new javax.swing.JLabel();
        tfConversionIdentifier = new javax.swing.JTextField();
        tfConversionRate = new javax.swing.JTextField();
        btnRefreshEntries = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Database Manager Application");
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Conversion Rates Table"));

        tbConversionRate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Currency Conversion Identifier", "Conversion Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbConversionRate.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tbConversionRate);
        tbConversionRate.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Modify Table Data"));

        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnDeleteRow.setText("Delete Row");
        btnDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRowActionPerformed(evt);
            }
        });

        lblCurrencyIdentifier.setText("Currency Identifier");
        lblCurrencyIdentifier.setToolTipText("");

        lblConvRate.setText("Conversion Rate");

        tfConversionIdentifier.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfConversionRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfConversionRate.setText("0.0");

        btnRefreshEntries.setText("Refresh Table");
        btnRefreshEntries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshEntriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(btnRefreshEntries)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(btnAddRow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteRow)
                .addGap(2, 2, 2))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCurrencyIdentifier)
                    .addComponent(lblConvRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfConversionRate)
                    .addComponent(tfConversionIdentifier))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrencyIdentifier)
                    .addComponent(tfConversionIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConvRate)
                    .addComponent(tfConversionRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteRow)
                    .addComponent(btnAddRow)
                    .addComponent(btnRefreshEntries)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        
        try {
            String strIdentifier = tfConversionIdentifier.getText();
            String strRate = tfConversionRate.getText();

            if(strIdentifier != null && ! ("".equals(strIdentifier)) &&
                                    strRate != null && ! ("".equals(strRate)) ) {                        
                strIdentifier = strIdentifier.trim();
                float fConversionRate = Float.parseFloat(strRate);

                // Persist the record in the database
                ConversionRates newRow = new ConversionRates();
                newRow.setStrConversionIdentifier(strIdentifier);
                newRow.setConversionRate(fConversionRate);

                em.persist(newRow);
                
                // Refresh the table
                refreshTableEntries();                
            }
        } catch(Exception ex) {
            System.out.println("Exception adding row - " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void btnDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRowActionPerformed

        try{
            int nSelectedRow = tbConversionRate.getSelectedRow();
            if(nSelectedRow != -1) {

                String strIdentifier = tbConversionRate.getModel().getValueAt(nSelectedRow, 0).toString();
                String strRate = tbConversionRate.getModel().getValueAt(nSelectedRow, 1).toString();
                if(strIdentifier != null && ! ("".equals(strIdentifier)) &&
                                    strRate != null && ! ("".equals(strRate)) ) {                
                    strIdentifier = strIdentifier.trim();
                    float fConversionRate = Float.parseFloat(strRate);

                    // Persist the record in the database
                    ConversionRates existingRow = new ConversionRates();
                    existingRow.setStrConversionIdentifier(strIdentifier);
                    existingRow.setConversionRate(fConversionRate);

                    // Find out the record from the database and delete the record
                    em.remove(existingRow);   
                    
                    // Refresh the table
                    refreshTableEntries();
                }
            }
        } catch(Exception ex) {
            System.out.println("Exception deleting row - " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteRowActionPerformed

    private void btnRefreshEntriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshEntriesActionPerformed
        refreshTableEntries();
    }//GEN-LAST:event_btnRefreshEntriesActionPerformed

    private void refreshTableEntries() {
        try{            
            // Clear all the existing rows in the table
            int rowCount = tableModel.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                tableModel.removeRow(i);
            }
        
            Query selectQuery = em.createQuery("Select cRate from ConversionRates cRate");
            List<ConversionRates> listOfRows = selectQuery.getResultList();
            
            // Fill in the newer set of rows
            for(ConversionRates obj : listOfRows) {
               tableModel.addRow(new Object[]{obj.getStrConversionIdentifier(), obj.getConversionRate()});
            }            
        } catch(Exception ex) {
            System.out.println("Exception while querying entries - " + ex.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBAUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBAUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBAUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBAUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DBAUtility().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnDeleteRow;
    private javax.swing.JButton btnRefreshEntries;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblConvRate;
    private javax.swing.JLabel lblCurrencyIdentifier;
    private javax.swing.JTable tbConversionRate;
    private javax.swing.JTextField tfConversionIdentifier;
    private javax.swing.JTextField tfConversionRate;
    // End of variables declaration//GEN-END:variables
}
