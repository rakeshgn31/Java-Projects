/*
 * Welcome to NetBeans...!!!
 */
package traders;

import bank.Bank;
import market.Item;
import market.IFMarket;

import java.util.Map;
import java.awt.Component;
import java.awt.Container;
import java.util.ArrayList;
import java.rmi.RemoteException;
import javax.swing.SwingUtilities;

/**
 *
 * @author admin
 */
public class ShoppingGUI extends javax.swing.JFrame {

    RegisterPane regPanel;
    ProfilePane profilePanel;
    BuyPane buyPanel;
    SellPane sellPanel;
    
    ProfileInformation objTraderInformation;
    
    // Object of class responsible for calling remote methods on server
    TradeImpl objTradeImpl;    
    
    /**
     * Creates new form ShoppingGUI
     */
    public ShoppingGUI() {
        
        initComponents();
        
        objTraderInformation = new ProfileInformation();        
        
        // Initialize an instance of TradeImpl class
        try {
            objTradeImpl = new TradeImpl(this);
        } catch (RemoteException ex) {
            System.out.println("Remote Exception while initialising TradeImpl. Error :: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlWelcome = new javax.swing.JPanel();
        lblWelcome = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        tfUsername = new javax.swing.JTextField();
        lblBalance = new javax.swing.JLabel();
        tfBalanceValue = new javax.swing.JTextField();
        btnUnregister = new javax.swing.JButton();
        pnlContents = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        pnlStatusbar = new javax.swing.JPanel();
        tfStatusField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SalesShore - Buying and selling made easy...!!!");
        setAlwaysOnTop(true);
        setType(java.awt.Window.Type.UTILITY);

        pnlWelcome.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblWelcome.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWelcome.setText("Welcome");
        lblWelcome.setToolTipText("");
        lblWelcome.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnLogout.setText("Log out");
        btnLogout.setToolTipText("");
        btnLogout.setEnabled(false);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        tfUsername.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUsername.setEnabled(false);

        lblBalance.setText("Balance");

        tfBalanceValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfBalanceValue.setText("0");
        tfBalanceValue.setEnabled(false);

        btnUnregister.setText("Un-Register");
        btnUnregister.setEnabled(false);
        btnUnregister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnregisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlWelcomeLayout = new javax.swing.GroupLayout(pnlWelcome);
        pnlWelcome.setLayout(pnlWelcomeLayout);
        pnlWelcomeLayout.setHorizontalGroup(
            pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWelcomeLayout.createSequentialGroup()
                .addComponent(lblWelcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBalance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfBalanceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(btnUnregister)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout)
                .addGap(6, 6, 6))
        );
        pnlWelcomeLayout.setVerticalGroup(
            pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnLogout)
                .addComponent(lblWelcome)
                .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblBalance)
                .addComponent(tfBalanceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnUnregister))
        );

        pnlContents.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlContents.setName(""); // NOI18N

        tabbedPane.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.orange, null));
        tabbedPane.setAutoscrolls(true);

        javax.swing.GroupLayout pnlContentsLayout = new javax.swing.GroupLayout(pnlContents);
        pnlContents.setLayout(pnlContentsLayout);
        pnlContentsLayout.setHorizontalGroup(
            pnlContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );
        pnlContentsLayout.setVerticalGroup(
            pnlContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );

        pnlStatusbar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tfStatusField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfStatusField.setEnabled(false);

        javax.swing.GroupLayout pnlStatusbarLayout = new javax.swing.GroupLayout(pnlStatusbar);
        pnlStatusbar.setLayout(pnlStatusbarLayout);
        pnlStatusbarLayout.setHorizontalGroup(
            pnlStatusbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tfStatusField, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pnlStatusbarLayout.setVerticalGroup(
            pnlStatusbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tfStatusField, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlWelcome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlStatusbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStatusbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
  
        logoutHelper();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnUnregisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnregisterActionPerformed
        
        String strUserName = objTraderInformation.getTraderName();
        if(strUserName != null) {
            objTradeImpl.unregisterTrader(strUserName);
            logoutHelper();
        }
    }//GEN-LAST:event_btnUnregisterActionPerformed

    private void logoutHelper() {
        
        this.tfUsername.setText("");
        this.tfBalanceValue.setText("0");
        this.btnLogout.setEnabled(false);
        this.btnUnregister.setEnabled(false);

        // Disable myprofile, buy, and sell tabs
        regPanel.enableLoginPanel();
        EnableComponents(profilePanel, false);
        EnableComponents(buyPanel, false);
        EnableComponents(sellPanel, false);
        
        objTraderInformation = null;
    }

    // Enables of disables the children of the entire parent container
    private void EnableComponents(Container container, boolean bEnable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(bEnable);
            if (component instanceof Container) {
                EnableComponents((Container)component, bEnable);
            }
        }
    }
    
    public void Initialize(IFMarket marketServer, Bank objBankClient) {
        
        // Set the market and bank remote objects in TradeImpl class
        objTradeImpl.initializeObjects(marketServer, objBankClient); 
        
        // Initialize different panels
        regPanel = new RegisterPane(this);
        profilePanel = new ProfilePane(this);
        buyPanel = new BuyPane(this);
        sellPanel = new SellPane(this);
        
        // Add tabs to the tabbed pane and set up the complete GUI
        this.tabbedPane.add(regPanel);        
        this.tabbedPane.add(profilePanel);
        this.tabbedPane.add(buyPanel);
        this.tabbedPane.add(sellPanel);
        
        this.tabbedPane.setTitleAt(0, "Register/Login");
        this.tabbedPane.setTitleAt(1, "My Profile");
        this.tabbedPane.setTitleAt(2, "Buy Items");
        this.tabbedPane.setTitleAt(3, "Sell Items");
        
        // Disable myprofile, buy, and sell tabs        
        EnableComponents(profilePanel, false);
        EnableComponents(buyPanel, false);
        EnableComponents(sellPanel, false);
    }

    public ProfileInformation getProfileData() {
    
        ProfileInformation objProfileInfo = null;
        
        // Call a method in TradeImpl class to make a call to remote server method
        objProfileInfo = objTradeImpl.getProfileInformation(objTraderInformation.getTraderName());
        objTraderInformation = objProfileInfo;  // Server sent data contains all the stats filled in.
        
        return objProfileInfo;
    }
    
    public boolean connectToMarket(ProfileInformation objProfileInformation, boolean bRegister) {
        
        boolean bRetValue;
        
        if (bRegister) {
            // Call Register Trader method
            bRetValue = objTradeImpl.registerTrader(objProfileInformation.getTraderName(), objProfileInformation.getPassword());
        } else {
            // Call Login to Market method
            bRetValue = objTradeImpl.loginToMarket(objProfileInformation.getTraderName(), objProfileInformation.getPassword());
            if(bRetValue) {
                objTraderInformation = objProfileInformation;
                this.tfUsername.setText(objProfileInformation.getTraderName());
                this.btnLogout.setEnabled(true);
                this.btnUnregister.setEnabled(true);
                
                // Enable myprofile, buy, and sell tabs once login succeeds            
                EnableComponents(profilePanel, true);
                EnableComponents(buyPanel, true);
                EnableComponents(sellPanel, true);
            }                        
        }
        
        return bRetValue;
    }
    
    public String getTraderName() {
        return objTraderInformation.getTraderName();
    }
    
    public void buyItemFromStore(String strSellerName, String strItemName, int nDisplayedPrice) {
       
        objTradeImpl.buyItemFromInventory(objTraderInformation.getTraderName(), strSellerName, strItemName, nDisplayedPrice);
    }
    
    public void addItemToWishList(String strItemName, int nWishPrice) {
        objTradeImpl.addItemToWishList(objTraderInformation.getTraderName(), strItemName, nWishPrice);
    }
    
    public void refreshInventory() {
        this.buyPanel.RefreshTable();
    }
    
    public Map<String, ArrayList<Item>> getAllItemsFromInventory() {

        return objTradeImpl.getAllItemsFromInventory();
    }
    
    public void placeItemForSale(String strItemName, int nSellingPrice) {

        // Call method on Trade Impl class
        objTradeImpl.placeItemForSale(objTraderInformation.getTraderName(), strItemName, nSellingPrice);
    }
    
    public void removeSoldItemFromList(String strItemName) {
        
        // Call sell panel method
        sellPanel.removeSoldItemFromList(strItemName);
    }
    
    // Sets the status of the remote call/notification from server in the status bar.
    public void setStatus(String strStatus) {
        SwingUtilities.invokeLater(() -> {
            this.tfStatusField.setText(strStatus);
        });        
    }
    
    public void refreshBalance(Integer nBalance) {
        SwingUtilities.invokeLater(() -> {
            this.tfBalanceValue.setText(nBalance.toString());
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnUnregister;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JPanel pnlContents;
    private javax.swing.JPanel pnlStatusbar;
    private javax.swing.JPanel pnlWelcome;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField tfBalanceValue;
    private javax.swing.JTextField tfStatusField;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
}
